<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="https://shinjayne.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://shinjayne.github.io/" rel="alternate" type="text/html" /><updated>2018-03-01T17:30:20+09:00</updated><id>https://shinjayne.github.io/</id><title type="html">Jayne.who();</title><subtitle>shinjayne`s Developer Blog. 신재인의 개발 블로그. Web / Deep Learning / Android / etc ...</subtitle><entry><title type="html">Docker 공식문서 에서 제시하는 개발-배포 Flow 따라가기 (Docker Swarm 사용하기)</title><link href="https://shinjayne.github.io/post/21" rel="alternate" type="text/html" title="Docker 공식문서 에서 제시하는 개발-배포 Flow 따라가기 (Docker Swarm 사용하기)" /><published>2018-02-09T21:04:50+09:00</published><updated>2018-02-09T21:04:50+09:00</updated><id>https://shinjayne.github.io/post/21</id><content type="html" xml:base="https://shinjayne.github.io/post/21">&lt;blockquote&gt;
  &lt;h5 id=&quot;pre-requisite&quot;&gt;pre-requisite&lt;/h5&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine&lt;/code&gt; 이 세가지 프로그램이 설치되어야 한다.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://store.docker.com/search?type=edition&amp;amp;offering=community&quot;&gt;Docker Store(링크)&lt;/a&gt; 에서 설치 가능하다. 자신의 OS 에 맞는 Docker 를 설치하자.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;서론&quot;&gt;서론&lt;/h5&gt;
&lt;p&gt;그동안 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt; 를 사용하여 웹 서버 개발을 하고 있었지만, Docker 공식 문서를 오랜만에 들어가보니 그곳에서 추구하는 개발-배포 flow 는 나의 그것과 사뭇 달랐다.&lt;/p&gt;

&lt;p&gt;나의 방식보다 훨씬 깔끔하고 스마트했다. 그래서 한번 제대로 익혀놓고, 앞으로 이렇게 개발-배포 하자 라고 마음먹으며 이 글을 쓴다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;“Docker 에서 제시하는 개발-배포 Flow 는 AWS 나 Azure 에서 자사 제품들을 이용하여 제시하는 개발-배포 Flow 의 대체가 될 수 있을 것 같다.”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;새로운 개발 배포 flow를 익히면서 중점적인 이슈로 둔 부분은 아래와 같다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 초기구축 : 초기 서비스 그룹(DB, WAS, Web Server 등) 구축이 쉬운가&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 스케일 조정 : Load Balancing 설정이 쉽고, Scale 조정이 쉬운가&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 코드 배포 : 추후 앱의 로직 코드 변경시 배포가 편리한가&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;클라우드를 제공하는 AWS 나 AZURE 는 자신들이 만들어놓은 여러 제품들을 이용하면 위 세가지를 편리하게 실현할 수 있게 하였다. (AWS 의 ELB-elastic load balancer 를 이용하면 로드밸런싱이 쉽게 가능한 것 처럼 …)&lt;/p&gt;

&lt;p&gt;과연 Docker 를 이용한 서버 개발-배포 flow 도 위의 세가지가 가능할까? Docker 공식 문서를 읽고 난 후 나의 생각은 ‘yes’ 이다.&lt;/p&gt;

&lt;h1 id=&quot;docker-에서-제시하는-개발-배포-flow&quot;&gt;Docker 에서 제시하는 개발-배포 Flow&lt;/h1&gt;

&lt;h2 id=&quot;1-초기-구축&quot;&gt;1. 초기 구축&lt;/h2&gt;
&lt;p&gt;초기 구축이란, 코드가 배포될 클라우드의 인프라를 구축하는 일을 말한다.&lt;/p&gt;

&lt;p&gt;Docker를 이용한 개발-배포 Flow 에서, 초기 구축은 두 단계로 나뉜다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Swarm(Docker Machine Cluster) 를 구축한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; 로 Stack 구성하고 실행한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-1swarm-구축&quot;&gt;1-1.Swarm 구축&lt;/h3&gt;

&lt;p&gt;Swarm 이란 여러 Docker Macine들이 마치 하나의 Docker 실행환경처럼 작동하는 Virtual Macine Cluster 를 말한다.&lt;/p&gt;

&lt;p&gt;아래 그림처럼 Swarm 이 클라우드 서버 상의 두대의 Docker Machine 으로 구성되어 있다면, 우리가 제공하고자 하는 앱에 필요한 컨테이너들이 두 가상머신에 적절한 수로 배치된다.&lt;/p&gt;

&lt;h4 id=&quot;manager-node-와-worker-node&quot;&gt;Manager node 와 Worker node&lt;/h4&gt;
&lt;p&gt;Swarm 의 각 Docker Machine 들은 Node 라고 부르며, 하나의 Manager Node와 다수의 Worker Node 로 이루어져있다. 오직 Manager node 만이 다른 node 에 접근하고 제어할 수 있다. 우리는 이 모든 노드에 접속해 일일히 동작을 제어할 필요 없이, Manager Node 의 Shell 에 접속해서 마치 swarm 이 하나의 Docker 실행환경이라고 생각하고 docker 명령어를 실행하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/get-started/images/visualizer-with-redis.png&quot; alt=&quot;swarm&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;manager--worker-설정&quot;&gt;Manager / Worker 설정&lt;/h4&gt;

&lt;p&gt;우선 접속 가능한 docker machine 리스트를 확인한다.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker-machine ls
NAME    ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS
myvm1   -        virtualbox   Running   tcp://192.168.99.100:2376           v17.06.2-ce   
myvm2   -        virtualbox   Running   tcp://192.168.99.101:2376           v17.06.2-ce   

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 중 manager 로 삼을 docker machine 을 골라 아래와 같이 수행한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker-machine ssh myvm1 &lt;span class=&quot;s2&quot;&gt;&quot;docker swarm init --advertise-addr &amp;lt;myvm1 ip&amp;gt;&quot;&lt;/span&gt;
Swarm initialized: current node &amp;lt;node ID&amp;gt; is now a manager.

To add a worker to this swarm, run the following &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;:

  docker swarm join &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --token &amp;lt;token&amp;gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &amp;lt;myvm ip&amp;gt;:&amp;lt;port&amp;gt;

To add a manager to this swarm, run &lt;span class=&quot;s1&quot;&gt;'docker swarm join-token manager'&lt;/span&gt; and follow the instructions.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;위를 완료했다면
worker 로 삼을 docker machine 에서 아래와 같이 수행한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker-machine ssh myvm2 &lt;span class=&quot;s2&quot;&gt;&quot;docker swarm join &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
--token &amp;lt;token&amp;gt; &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
&amp;lt;ip&amp;gt;:2377&quot;&lt;/span&gt;

This node joined a swarm as a worker.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;이때 주의 할 점은 반드시 2377 포트를 이용해 swarm 통신을 해야한다는 것이다. 2376 이 절대 아니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이제 Manager Node 에서 모든 docker 명령을 수행하면 되는데, 첫번째 docker 명령으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker node ls&lt;/code&gt; 으로 모든 클러스터 노드들을 확인해보자.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker-machine ssh myvm1 &lt;span class=&quot;s2&quot;&gt;&quot;docker node ls&quot;&lt;/span&gt;
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
brtu9urxwfd5j0zrmkubhpkbd     myvm2               Ready               Active
rihwohkh3ph38fhillhhb84sk &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;   myvm1               Ready               Active              Leader
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;이렇게 Swarm 구축은 끝났고, 이 swarm 의 노드들을 Azure 나 Aws 의 클라우드 가상 머신으로 설정만 한다면 클라우드 서버 인프라 구축의 시작점이 되는 것이다.&lt;/p&gt;

&lt;p&gt;참고 1: &lt;a href=&quot;https://docs.microsoft.com/ko-kr/azure/virtual-machines/linux/docker-machine&quot;&gt;Azure 에서 Docker Machine 만드는 법&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;참고 2: &lt;a href=&quot;https://docs.docker.com/machine/drivers/aws/&quot;&gt;AWS 에서 Docker Machine 만드는 법&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;참고 3: &lt;a href=&quot;https://docs.docker.com/machine/drivers/&quot;&gt;Docker machine 에서 지원하는 가상머신 드라이버들&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;참고 4: &lt;a href=&quot;https://msdn.microsoft.com/ko-kr/library/windows/hardware/ff554678(v=vs.85).aspx&quot;&gt;driver 란?  Microsoft&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-2-docker-composeyml-로-stack-구성하고-실행&quot;&gt;1-2. &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; 로 Stack 구성하고 실행&lt;/h3&gt;

&lt;p&gt;Docker-Compose 는 컨테이너를 Stack-Service-Task 라는 세가지 가상 계층으로 구분해 관리한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stack : 하나의 앱. (Facebook, Youtube 처럼 큰 단위)&lt;/li&gt;
  &lt;li&gt;Service : 앱을 구성하는 하나의 역할. (Django서버, mySQL서버, Nginx서버 등 앱을 작동하기 위한 구성요소들)&lt;/li&gt;
  &lt;li&gt;Task : Service 를 이루는 컨테이너들&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;결국 우리가 만들고자 하는 것은 하나의 Stack 이고, &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;은 Stack 을 정의할 수 있는 파일이다.&lt;/p&gt;

&lt;h4 id=&quot;docker-composeyml-작성-예시&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; 작성 예시&lt;/h4&gt;
&lt;p&gt;아래는 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; 의 예시이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;visualizer&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;redis&lt;/code&gt; 라는 세개의 Service 가 이 Stack 을 이루고, &lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt; Service 는 5개의 Task(Container) 로 이루어져있다.&lt;/p&gt;

&lt;p&gt;5개의 Task 로 이루어진 &lt;code class=&quot;highlighter-rouge&quot;&gt;web&lt;/code&gt;서비스의 주소 80 port 로 접속이 들어오면, docker 는 round-robin 방식으로 load balancing 을 수행한다.&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# replace username/repo:tag with your name and image details&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;username/repo:tag&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;80:80&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;restart_policy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;on-failure&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;cpus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0.1&quot;&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;50M&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;webnet&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;visualizer&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dockersamples/visualizer:stable&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8080:8080&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/run/docker.sock:/var/run/docker.sock&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;placement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;constraints&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;node.role == manager&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;webnet&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;6379:6379&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ports 대신 expose:-&quot;6379&quot; 을 사용하면 docker network 상에서만 접근 가능하고, 실제 외부 포트로 연결은 되지 않는다.&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;redis-data-vol:/data&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;placement&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;constraints&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;node.role == manager&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis-server --appendonly yes&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;webnet&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;networks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;webnet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;redis-data-vol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;대략 하나의 서비스를 기술 할 때,&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ports&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;expose&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volumes&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;networks&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;command&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;등이 필수적인 설정값인듯 하다.&lt;/p&gt;

&lt;p&gt;참고로 docker swarm 을 이용해 개발-배포 한다면 network driver 의 기본 설정값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;overlay&lt;/code&gt; 이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;overlay&lt;/code&gt; 는 여러대의 docker-machine 에 나누어진 container들이 마치 하나의 network 상에 존재하는 것처럼 접속 가능하게 해준다.&lt;/p&gt;

&lt;p&gt;참고 1 : &lt;a href=&quot;https://docs.docker.com/compose/compose-file/#network-configuration-reference&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;networks&lt;/code&gt; top-level key 설정 관하여&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;참고 2 : &lt;a href=&quot;https://docs.docker.com/compose/compose-file/#volume-configuration-reference&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;volumes&lt;/code&gt; top-level key 설정 관하여&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;참고 3 : &lt;a href=&quot;https://docs.docker.com/compose/compose-file/#deploy&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; service-level key 설정 관하여&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;참고 4 : &lt;a href=&quot;https://docs.docker.com/network/network-tutorial-overlay/&quot;&gt;Docker 의 overlay network 에 대하여&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;stack-실행하기&quot;&gt;Stack 실행하기&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; 로 하나의 Stack 을 정의했으니, 이제 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; 파일을 Manager Node 에 업로드하고&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-machine scp /local/docker-compose.yml myvm1:/path/to/docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Manager Node 에서 Stack 을 실행한다. 이때 stack 정의에 참고할 Compose file 도 &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt; 옵션으로 적어준다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker stack deploy -c ./docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;1-3-docker-compose-와-docker-machine&quot;&gt;1-3. Docker Compose 와 Docker Machine&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;h4 id=&quot;docker-compose-가-하는-역할&quot;&gt;Docker Compose 가 하는 역할&lt;/h4&gt;
  &lt;ol&gt;
    &lt;li&gt;Stack-Service-Task 계층 구조를 확립시키고, 컨테이너를 효율적으로 관리하고 연결시킨다.&lt;/li&gt;
    &lt;li&gt;원본 Image 가 변경되어서 컨테이너가 recreate 될 때에도, 이전 컨테이너 내용을 복사해서 붙여넣어주므로 데이터 연속성과 유지력을 보완시켜준다. (&lt;strong&gt;기본적으로 컨테이너가 recreate 되면 read-write 계층 파일은 모두 사라진다.&lt;/strong&gt; ) (&lt;a href=&quot;http://judekim.tistory.com/15&quot;&gt;참고블로그링크&lt;/a&gt;)
&lt;img src=&quot;http://cfile25.uf.tistory.com/image/2567453B5214F0D815C008&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;li&gt;불필요한 container recreate 를 줄여준다. 이미지의 변경이 없을 시 컨테이너를 그대로 유지한다.&lt;/li&gt;
    &lt;li&gt;Docker Swarm 의 로드밸런싱 규칙을 설정한다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;docker-machine-이-하는-역할&quot;&gt;Docker Machine 이 하는 역할&lt;/h4&gt;
  &lt;p&gt;docker 실행 환경이 조성된 가상 머신을 생성하고 관리한다. Docker Swarm 을 구축하고 관리할 때 필수적이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;2-스케일-조정&quot;&gt;2. 스케일 조정&lt;/h2&gt;

&lt;h3 id=&quot;2-1-docker-로드밸런싱부하분산---두가지-패러다임&quot;&gt;2-1. docker 로드밸런싱(부하분산) :  두가지 패러다임&lt;/h3&gt;

&lt;p&gt;위의 초기 구축 단계를 따라오다보면 두가지 로드밸런싱의 패러다임을 발견할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;첫번째&lt;/strong&gt; : Cluster 의 worker node 를 추가함으로써 부하분산을 취하는 방식&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;두번째&lt;/strong&gt; :  Service 의 Task Container 수 (&lt;code class=&quot;highlighter-rouge&quot;&gt;replicas : 5&lt;/code&gt;)를 늘림으로써 부하분산을 취하는 방식&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;두가지 방식 모두 유용하다. 스케일 조정 참 쉽다.&lt;/p&gt;

&lt;h3 id=&quot;2-2-swarm-cluster-의-로드밸런싱&quot;&gt;2-2. Swarm Cluster 의 로드밸런싱&lt;/h3&gt;
&lt;p&gt;Swarm 의 각 노드 Machine 주소로 접속한다면?&lt;/p&gt;

&lt;p&gt;결국 각 노드에 존재하는 swarm loadbalancer 가 하나의 docker 실행환경처럼 작동해서 필요한 적절한 컨테이너로 연결해준다.
&lt;img src=&quot;https://docs.docker.com/engine/swarm/images/ingress-routing-mesh.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만 어떠한 가상머신(node)이 서비스를 제공하는지 숨기고 싶은 경우, 통상적인 방식대로 Swarm 앞에 로드밸런서를 하나 더 두어야한다. &lt;a href=&quot;https://www.upcloud.com/support/load-balancing-docker-swarm-mode/&quot;&gt;Load Balancing 을 수행하는 Proxy 서버로 Nginx 를 Swarm 앞에 사용하는 tutorial 관련 게시글&lt;/a&gt; 을 참조하면 이러한 시도들을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;이전 nginx 관련 포스트에서 설명했던 바와 같이, nginx 에는 기본 로드밸런서 기능이 내장되어있다.&lt;/p&gt;

&lt;p&gt;관련글 -&amp;gt; &lt;a href=&quot;http://jaynewho.com/post/18&quot;&gt;jayneWho();  &amp;gt; Post &amp;gt;   Nginx 에 대하여 (Nginx Basic Usage)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.upcloud.com/support/wp-content/uploads/2016/10/Load-balancing-docker-swarm.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/swarm/ingress/#configure-an-external-load-balancer&quot;&gt;또한 Docker Documentation 에도 Swarm 앞에 External Load Balancer 로 HAProxy 를 두는 법을 설명하고 있다.&lt;/a&gt; 아래 그림을 참고하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/swarm/images/ingress-lb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-코드-배포&quot;&gt;3. 코드 배포&lt;/h2&gt;

&lt;p&gt;위와 같이 클라우드 인프라를 구축해놓았다면, 코드를 배포하는 일은 너무나 쉽다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;소스 코드 수정 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker image build&lt;/code&gt; 하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Docker Hub Repository 에 새로 만든 이미지 push 하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; 파일 또는 swarm 에 bind-mount 파일 변경되었다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine scp&lt;/code&gt; 로 전송\&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-machine ssh myvm1 &quot;docker stack deploy -c ./docker-compose.yml&quot;&lt;/code&gt; 로 Stack 재배포하면, Repository 에서 이미지 새로 끌어와서 업데이트된 컨테이너가 구축됨&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/21/1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-1-local-에서-개발-테스트&quot;&gt;3-1. local 에서 개발 테스트&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose-dev.yml&lt;/code&gt; 파일을 작성해서, 로컬에서 돌릴만한 Stack 구성을 작성해 local 의 docker engine 에서 이미지와 컨테이너가 잘 작동하는지 테스트하며 개발할 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이로써 초기 구축, 스케일조정, 코드배포 까지 개발-배포 과정에서 docker 를 이용하는 방식을 살펴보았다. docker 공식 문서에 충실하게 말이다.&lt;/p&gt;

&lt;h5 id=&quot;좋은-refernece-발견&quot;&gt;좋은 refernece 발견&lt;/h5&gt;
&lt;p&gt;위와 같은 배포 flow 대로 충실히 수행한 toy-project 를 github 에서 발견하였다. 실제 코드가 보고싶을 때 &lt;a href=&quot;https://github.com/sophilabs/sample-django-docker-swarm&quot;&gt;“이 프로젝트 Github 링크”&lt;/a&gt; 로 들어가 프로젝트 코드를 살피면 좋을 듯 하다. backend service (django)(3 replicas) + frontend service (nginx)(2 replicas) 로 간단하게 구성되어있다. 이 곳에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker stack deploy -c docker-swarm.yml&lt;/code&gt; 을 해야한다.&lt;/p&gt;

&lt;h5 id=&quot;뭔가-아쉽다면&quot;&gt;뭔가 아쉽다면&lt;/h5&gt;
&lt;p&gt;그런데 뭔가 배포한 Swarm 과 Stack 에 관한 시각화와 관리 툴이 있으면 좋겠다는 생각이 든다. 그 때 발견한 것이 Docker Cloud 이다.&lt;/p&gt;

&lt;h1 id=&quot;docker-cloud-web-console-이용하여-swarm-관리&quot;&gt;Docker Cloud Web Console 이용하여 Swarm 관리&lt;/h1&gt;

&lt;p&gt;Docker Cloud 를 이용하면 자신의 Swarm 과 그 위에 돌아가는 Stack, Service, Task Container 들을 관리할 수 있다. 자세한 spec 설정까지 가능하다.&lt;/p&gt;

&lt;p&gt;자신의 Docker Hub Repository 에 있는 image 들도 불러와 관리할 수 있고, AutoBuild 기능으로 코드에 변화가 생겼을 때 바로바로 image 를 자동 재생성하는 기능 또한 갖췄다.&lt;/p&gt;

&lt;p&gt;심지어 새로운 Swarm 이나 이미지를 웹 상에서 만드는 것도 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/sophilabs/sample-django-docker-swarm/raw/master/create-swarm.png&quot; alt=&quot;&quot; /&gt;
(docker-machine 드라이버를 제공하는 다른 cloud hosting 서비스 업체들은 많지만, swarm 만들기를 지원하는건 아직 amazon 과 azure 뿐인가보다. 다른 서비스업체를 이용할 경우 직접 위 방식대로 swarm 을 만들어야겠다.)&lt;/p&gt;

&lt;p&gt;매우 간단한 UI 이므로, 직접 사용해보는 것을 추천한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/docker-cloud/&quot;&gt;Docker Cloud Documentation&lt;/a&gt; 의 Manage Swarms 를 보면서 사용하면 좋을 듯 하다.&lt;/p&gt;</content><author><name></name></author><category term="docker" /><category term="swarm" /><category term="stack" /><category term="service" /><category term="container" /><category term="image" /><category term="deploy" /><summary type="html">pre-requisite docker, docker-compose, docker-machine 이 세가지 프로그램이 설치되어야 한다. Docker Store(링크) 에서 설치 가능하다. 자신의 OS 에 맞는 Docker 를 설치하자.</summary></entry><entry><title type="html">AngularJS 와 Django Template Tag 충돌 해결</title><link href="https://shinjayne.github.io/post/20" rel="alternate" type="text/html" title="AngularJS 와 Django Template Tag 충돌 해결" /><published>2018-01-26T13:10:50+09:00</published><updated>2018-01-26T13:10:50+09:00</updated><id>https://shinjayne.github.io/post/20</id><content type="html" xml:base="https://shinjayne.github.io/post/20">&lt;p&gt;AngularJS 는 웹 앱의 프런트엔드 부분을 만드는 Javascipt Framework 이고, Django 의 Template Engine 은 백엔드 Framework 에서 동적으로 html 문서를 생성해주는 시스템이다.&lt;/p&gt;

&lt;p&gt;이 두개를 함께 쓰려하면 한가지 문제가 생긴다. AngularJS 에서 Model(내부변수들)을 View(HTML 문서) 에 bind 할 때 사용하는 Symbol 과 Django Tempate Engine 에서 사용하는 Tag Symbol 이 동일하기 때문에, 함께 사용하면 AngularJS 의 Bind Symbol 이 작동하지 않는다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위한 방법은 여러가지 있는데, 그중 내가 사용해보려고 하는 방법은 AngularJS  module 의 설정(config) 중 하나인 &lt;code class=&quot;highlighter-rouge&quot;&gt;$interpolateProvider&lt;/code&gt; 를 조정하는 것이다.&lt;/p&gt;

&lt;h1 id=&quot;interpolateprovider-조정하기&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$interpolateProvider&lt;/code&gt; 조정하기&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.angularjs.org/api/ng/provider/$interpolateProvider&quot;&gt;AngularJS 의 공식 Documentation&lt;/a&gt; 에 자세한 사용법이 나온다.&lt;/p&gt;

&lt;p&gt;아래의 예시는 기존의 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;} }&lt;/code&gt; 이던 Binding Symbol 을 &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; 와 &lt;code class=&quot;highlighter-rouge&quot;&gt;//&lt;/code&gt; 로 변경한다.&lt;/p&gt;

&lt;p&gt;다만 이 설정은 config 설정을 조정한 해당 앱 내에서만 작동한다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;customInterpolationApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'customInterpolationApp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;customInterpolationApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$interpolateProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$interpolateProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'//'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$interpolateProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'//'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;


  &lt;span class=&quot;nx&quot;&gt;customInterpolationApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'DemoController'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;This binding is brought you by // interpolation symbols.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DemoController as demo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    //demo.label//
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><category term="django" /><category term="angular" /><category term="backend" /><category term="frontend" /><category term="javascript" /><summary type="html">AngularJS 는 웹 앱의 프런트엔드 부분을 만드는 Javascipt Framework 이고, Django 의 Template Engine 은 백엔드 Framework 에서 동적으로 html 문서를 생성해주는 시스템이다.</summary></entry><entry><title type="html">Nginx 에 대하여 (Nginx Basic Usage)</title><link href="https://shinjayne.github.io/post/18" rel="alternate" type="text/html" title="Nginx 에 대하여 (Nginx Basic Usage)" /><published>2018-01-16T17:10:50+09:00</published><updated>2018-01-16T17:10:50+09:00</updated><id>https://shinjayne.github.io/post/18</id><content type="html" xml:base="https://shinjayne.github.io/post/18">&lt;p&gt;현재 개발중인 웹 앱 서비스에서 대규모 데이터베이스 쿼리 연산을 하던중 502 서버 에러를 마주했다. 그동안은 주먹구구식으로 구글링해가면서 문제가 생길 때마다 대충 해결하고 넘어갔지만, 이번 에러는 쉽게 해결되지 않았다. 그래서, 자세히 모르면서 그냥 사용해 온 Nginx Http Server 에 대해 자세히 알아보고, 에러가 발생하는 원인과 해결 방법을 스스로 찾을 수 있는 능력을 기르고자 &lt;a href=&quot;http://nginx.org/en/docs/&quot;&gt;Nginx 공식 Documentation&lt;/a&gt; 을 정독한 후기를 작성하려 한다.&lt;/p&gt;

&lt;h1 id=&quot;nginx-의-구조&quot;&gt;nginx 의 구조&lt;/h1&gt;
&lt;p&gt;nginx 는 하나의 master process 와 여러 worker processes 로 이루어져있다.
master process 는 configuration file 을 읽고 worker processes 를 관리한다.&lt;/p&gt;

&lt;h1 id=&quot;configuration-file-구조&quot;&gt;configuration file 구조&lt;/h1&gt;
&lt;p&gt;nginx 의 configuration file 은 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/nginx.config&lt;/code&gt; 에 위치한다.  파일을 열면 directives(지시어) 가 나열되어있다. 이 지시어들은 nginx 의 modules 의 동작을 기술한다.&lt;/p&gt;

&lt;p&gt;directives 는 simple directives 와 block directives 로 나뉜다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;simple directives 예시&lt;/strong&gt;&lt;/p&gt;
  &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;client_max_body_size&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;;
 &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;;
 &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;;
 &lt;span class=&quot;n&quot;&gt;keepalive_timeout&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;block directives 예시&lt;/strong&gt;&lt;/p&gt;
  &lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt; {
 &lt;span class=&quot;n&quot;&gt;ip_hash&lt;/span&gt;;
 &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;8000&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;block directives 들 중에 그 안에 다른 block directives 를 기술할 수 있다면 그것은 &lt;strong&gt;context&lt;/strong&gt;  라고 부른다. 대표적 context 로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt; 등이 있고, 순서대로 포함관계에 있다. (공식 documentation 을 읽다보면 각 지시어directives 를 사용 가능한 context를 지정해주는데, 그때의 context 가 바로 이것이다. )&lt;/p&gt;

&lt;h1 id=&quot;간단한-static-file-을-serving&quot;&gt;간단한 Static file 을 Serving&lt;/h1&gt;

&lt;p&gt;기본 구조를 작성한다.&lt;/p&gt;
&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {

    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
      &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; ;
    }

    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;images&lt;/span&gt;/ {
      &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; /&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; ;
    }

  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http&lt;/code&gt; context 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt; context 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt; context 가 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;location&lt;/code&gt; 뒤에 있는 url(/) 로 접속 시에 서버의 디렉터리(/path/to/html) 에 있는 정적 파일을 제공하겠다는 내용을 담고있다.&lt;/p&gt;

&lt;h1 id=&quot;proxy-server-로-이용하기&quot;&gt;Proxy Server 로 이용하기&lt;/h1&gt;

&lt;p&gt;proxy server 가 무엇인지에 대해서는 &lt;a href=&quot;https://ko.wikipedia.org/wiki/프록시_서버&quot;&gt;Wiki : 프록시서버&lt;/a&gt; 를 참조하면 된다. 간단히 말하면 서버로 들어온 request를 다른 서버에 전달하고, 그 서버로부터 response 를 전달받아 다시 클라이언트로 전달하는 중간상인 같은 서버가 proxy server 이다.&lt;/p&gt;

&lt;p&gt;새로운 &lt;code class=&quot;highlighter-rouge&quot;&gt;server&lt;/code&gt; 블록 디렉티브를 만들어 프록시서버를 기술한다.&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;;  &lt;span class=&quot;c&quot;&gt;#기술 안하면 default 는 80 port
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
      &lt;span class=&quot;n&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;;
    }

  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;nginx-프록시---cgi서버---was---proxy-server-로-사용하는-대표적-사례&quot;&gt;NGINX 프록시 -&amp;gt; CGI서버 -&amp;gt; WAS   (Proxy Server 로 사용하는 대표적 사례)&lt;/h2&gt;

&lt;p&gt;프록시 서버를 사용하는 경우 보통 다양한 언어로 쓰여진 내부의 WAS(Web Application Service) 와 통신하는 경우가 많다. WAS 와 정적 웹 서버가 통신하기 위한 규칙을 CGI(Common Gateway Interface) 라고 하고, 각 언어마다 다른 CGI 를 가진다. (python 은 WSGI, ruby는 Rack, perl은 PSGI 등)&lt;/p&gt;

&lt;p&gt;이런 CGI 통신이 가능한 서버를 CGI서버(fastCGI, uWSGI, SCGI 등)라고 하고, python WAS 에서 가장 널리 쓰이는 CGI서버의 이름은 uWSGI 이다. (실제로는 uWSGI 는 python 의 WSGI, ruby의 Rack, perl 의 PSGI 규칙 모두와 통신할 수 있다. ) CGI서버 자체로도 웹서버 기능을 사용하고 클라이언트에 데이터를 제공할 수 있지만, 보통 NGINX 와 같은 정적 웹서버의 정적 파일(Static file) 서빙 성능이 좋아서, Nginx 를 프록시 서버로 사용하여 Nginx 로 들어온 request 를 CGI서버로 넘기는 구조를 많이 채택한다.
(&lt;a href=&quot;https://uwsgi-docs.readthedocs.io/en/latest/WSGIquickstart.html&quot;&gt;uWSGI의 공식 문서에도 이런 방식에 대한 설명이 나와있다.&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;주의할 점 : 각 CGI 규칙의 이름들과 각 CGI서버의 이름들이 굉장히 헷갈릴 수 있다.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;CGI 규칙 : WSGI, Rack, PSGI 등&lt;/p&gt;

  &lt;p&gt;CGI 서버 : uWSGI, fastCGI, SCGI 등&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nginx에는 기본적으로 몇가지 CGI서버의 프록시서버로 사용시에 유용한 기능들을 탑재되어있다. 대표적으로 uwsgi_module 이라는 nginx 모듈의 다양한 기능을 이용하면 uwsgi 서버의 프록시 서버로 쉽게 이용이 가능하다.
(&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_uwsgi_module.html#uwsgi_pass&quot;&gt;Nginx 공식 Doc :  uwsgi_module&lt;/a&gt; 에 가면 다양한 기능들을 살펴볼 수 있다. )&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_pass&lt;/code&gt; 라는 directive 대신에 &lt;code class=&quot;highlighter-rouge&quot;&gt;uwsgi_pass&lt;/code&gt; 라는 directive 를 사용한다. 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;uwsgi_param&lt;/code&gt; 이라는 지시어를 통해 인자를 전달할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;;  &lt;span class=&quot;c&quot;&gt;#기술 안하면 default 는 80 port
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uwsgi_param&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTPS&lt;/span&gt; $&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;if_not_empty&lt;/span&gt;;
    &lt;span class=&quot;c&quot;&gt;# HTTPS 라는 parameter 에 $https 값을 담는다.
&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# (if_not_empty 를 적으면 비어있을 경우 전달하지 않는다.)
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
      &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uwsgi_params&lt;/span&gt;;      &lt;span class=&quot;c&quot;&gt;#uwsgi_param 을 전달한다.  
&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;uwsgi_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;;
    }

  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;load-balancer-로-이용하기&quot;&gt;Load Balancer 로 이용하기&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://nginx.org/en/docs/http/load_balancing.html&quot;&gt;관련 공식 doc link: Using Nginx as HTTP load balancer&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;하나의 Proxy server(Nginx) 에서 여러 WAS+CGI서버로 적절히 부하를 나누어 연결하는 기술을 load balancing 이라고 하고, 웹서버에서 아주 많이 사용되는 기술이다.&lt;/p&gt;

&lt;p&gt;configuration file 에 로드밸런싱을 명령하는 방법은 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;{

  &lt;span class=&quot;c&quot;&gt;# load balancing 할 서버 그룹을 정의한다.
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servergroup1&lt;/span&gt; {
    &lt;span class=&quot;c&quot;&gt;# load balance 기법을 정한다.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ip_hash&lt;/span&gt;;

    &lt;span class=&quot;c&quot;&gt;# 서버 (주소+port+[옵션])를 나열한다.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv1&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv2&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;3030&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weight&lt;/span&gt;=&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;;
    &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;srv3&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;;
  }

  &lt;span class=&quot;c&quot;&gt;# 프록시 서버로서의 nginx 동작을 기술한다.
&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;;

    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
      &lt;span class=&quot;n&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;n&quot;&gt;servergroup1&lt;/span&gt; ; &lt;span class=&quot;c&quot;&gt;#(프로토콜명+로드밸런싱 그룹 이름)을 적어주면 된다
&lt;/span&gt;    }
  }

}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Nginx 에서 제공하는 &lt;strong&gt;Load Balancing method&lt;/strong&gt; 는 3가지로 소개되어있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;round-robin&lt;/strong&gt; : requests to the application servers are distributed in a round-robin fashion&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;least-connected&lt;/strong&gt; : next request is assigned to the server with the least number of active connections&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;ip-hash&lt;/strong&gt; : a hash-function is used to determine what server should be selected for the next request (based on the client’s IP address)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;customizing-사례1--proxy-요청-timeout-늘리기&quot;&gt;Customizing 사례1 : Proxy 요청 Timeout 늘리기&lt;/h1&gt;

&lt;p&gt;Nginx 는 다양한 처리에 Timeout 이라는 limit 이 설정되어있다. (&lt;a href=&quot;http://nginx.org/en/docs/dirindex.html&quot;&gt;Nginx 공식 Documentation 의 Directives dictionary&lt;/a&gt; 에 timeout 이라고만 검색해도 엄청나게 많은 timeout 설정 관련한 directives 가 존재한다 )&lt;/p&gt;

&lt;p&gt;예를 들어 WAS(Web Application Service) 와 CGI서버의 프록시서버로 사용되고 있는 Nginx 에서는, CGI서버와 WAS로 전달된 요청(request)이 일정 시간 안에 응답(response)되지 않으면 client 에 504:Timeout Error 를 발생시킨다.&lt;/p&gt;

&lt;p&gt;이러한 문제를 timeout 설정에 관련된 directives 를 configuration file 에 기술해줌으로써 해결할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;{
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
      ...

      &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
          &lt;span class=&quot;n&quot;&gt;proxy_connect_timeout&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;;
          &lt;span class=&quot;n&quot;&gt;proxy_send_timeout&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;;
          &lt;span class=&quot;n&quot;&gt;proxy_read_timeout&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;;
          &lt;span class=&quot;n&quot;&gt;send_timeout&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;;
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;공식 documentation 을 읽어보면 각 timeout 의 종류와 default 값들을 확인할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;customizing-사례2-client-업로드-파일-용량-제한-늘리기&quot;&gt;Customizing 사례2: Client 업로드 파일 용량 제한 늘리기&lt;/h1&gt;

&lt;p&gt;웹 앱을 운영하다보면 사용자로부터 대용량 업로드 파일을 받아야하는 경우가 생긴다. 이럴 경우에는 간단히 server 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;client_max_body_size&lt;/code&gt; directive 만 작성해주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;{
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextop&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;;
    &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt;;
    &lt;span class=&quot;c&quot;&gt;# 용량 업로드 제한 : default=10M
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;client_max_body_size&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;;

    &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
      ...
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><category term="nginx" /><category term="proxy" /><category term="cgi" /><category term="http" /><category term="server" /><category term="loadbalance" /><category term="WAS" /><summary type="html">현재 개발중인 웹 앱 서비스에서 대규모 데이터베이스 쿼리 연산을 하던중 502 서버 에러를 마주했다. 그동안은 주먹구구식으로 구글링해가면서 문제가 생길 때마다 대충 해결하고 넘어갔지만, 이번 에러는 쉽게 해결되지 않았다. 그래서, 자세히 모르면서 그냥 사용해 온 Nginx Http Server 에 대해 자세히 알아보고, 에러가 발생하는 원인과 해결 방법을 스스로 찾을 수 있는 능력을 기르고자 Nginx 공식 Documentation 을 정독한 후기를 작성하려 한다.</summary></entry><entry><title type="html">Python 의 상속</title><link href="https://shinjayne.github.io/post/15" rel="alternate" type="text/html" title="Python 의 상속" /><published>2017-12-04T21:26:50+09:00</published><updated>2017-12-04T21:26:50+09:00</updated><id>https://shinjayne.github.io/post/15</id><content type="html" xml:base="https://shinjayne.github.io/post/15">&lt;p&gt;(예전에 적어두었던 글을 이제서야 올려본다)&lt;/p&gt;

&lt;p&gt;python 의 상속에 대해 정리해보자.&lt;/p&gt;

&lt;h1 id=&quot;강제상속--자동상속&quot;&gt;강제상속 ? 자동상속?&lt;/h1&gt;

&lt;p&gt;강제상속 : 나에게 없을때, 부모클래스 namespace 로 거슬러 올라가 강제 사용&lt;/p&gt;

&lt;p&gt;자동상속 : 내가 부모 클래스 메서드를 덮어썼지만, 부모클래스메서드를 사용하고 싶을 때 super(_&lt;em&gt;class_&lt;/em&gt;, self).method() 로 부모메서드 호출&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sub1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sub2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sub2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tall&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#자동상속&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#s1 은 __init__ 이 없어서 Base 것을 참조한다&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sub1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jayne&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#강제상속&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#s2 는 자체 __init__ 이 있어서 Base 것을 덮어쓴다. Base 것을 강제 이용하려면, super를 통해 강제상속시킬 수 있다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sub2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jayne&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;182&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;다중상속시-super-는-누구것을-가져오나&quot;&gt;다중상속시 super 는 누구것을 가져오나?&lt;/h1&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sub1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sub2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sub2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tall&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;



&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SubSub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sub1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sub2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SubSub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위처럼 코드를 만들면, super는 누구의 init 메서드를 강제상속할까.&lt;/p&gt;

&lt;p&gt;후보는 Sub1 과 Sub2 이다.&lt;/p&gt;

&lt;p&gt;후보1 : Sub2 의 메서드를 강제 상속하므로 인자로 name, tall, age 모두 넘겨줘야한다.&lt;/p&gt;

&lt;p&gt;후보2 : Sub1 의 메서드를 찾다가, Base 의 init 메서드를 강제상속해오므로, name 만 넘겨주면 된다.&lt;/p&gt;

&lt;p&gt;이 답을 알아보는 방법은 help() 함수이다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SubSub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;so&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Help on SubSub in module __main__ object:

class SubSub(Sub1, Sub2)
 |  Method resolution order:
 |      SubSub
 |      Sub1
 |      Sub2
 |      Base
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Base:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Method resolution order 를 보면 알 있다.&lt;/p&gt;

&lt;p&gt;SubSub 는 자신에게 메서드가 없을 때(자동상속)나 부모의 메서드를 super 로 가져올 때 (강제상속) 위의 ordering 을 따르므로&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;super().__init__()&lt;/code&gt; 을 호출 할 때에도, Sub1 에 &lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt; 이 있기에  그 init 부터 가져와 사용하게 된다.&lt;/p&gt;

&lt;h1 id=&quot;결론--모든것은-namespace-참조-순서에-달렸다&quot;&gt;결론 : 모든것은 namespace 참조 순서에 달렸다.&lt;/h1&gt;</content><author><name></name></author><category term="class" /><category term="python" /><category term="object" /><category term="namespace" /><category term="inheritance" /><summary type="html">(예전에 적어두었던 글을 이제서야 올려본다)</summary></entry><entry><title type="html">빌드과정에 따른 프로그래밍 언어의 분류</title><link href="https://shinjayne.github.io/post/14" rel="alternate" type="text/html" title="빌드과정에 따른 프로그래밍 언어의 분류" /><published>2017-12-04T18:33:50+09:00</published><updated>2017-12-04T18:33:50+09:00</updated><id>https://shinjayne.github.io/post/14</id><content type="html" xml:base="https://shinjayne.github.io/post/14">&lt;p&gt;&lt;em&gt;본 글은 이 글( &lt;a href=&quot;http://the1900.tistory.com/73&quot;&gt;link&lt;/a&gt; ) 을 읽고 작성합니다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;텍스트로 된 소스코드가 실행가능한 프로그램 파일로 변하는 과정을 빌드(Build) 라고 부른다. Build 안에는 compile, preparse, preprocess, link 등의 다양한 과정이 포함되어있다.&lt;/p&gt;

&lt;p&gt;소스코드가 빌드가 되는 방식에 따라 프로그래밍 언어의 종류를 몇가지로 나눌 수 있다. 그 분류는 아래와 같다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;id&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Compile language&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;소스코드가 기계어로 바로 번역되어 실행파일이 됨&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Byte Code language&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;소스코드가 가상 머신이 읽는 바이트코드 파일로 번역되고, 그 바이트코드가 인터프리터처럼 한줄씩 기계어로 번역되 실행됨&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Interpreter language&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;소스코드가 한줄씩 기계어로 번역되어 실행됨&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;compile-language&quot;&gt;Compile Language&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile28.uf.tistory.com/image/2653324A54B5E296262CED&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;컴파일 언어는 소스코드가 기계어 실행파일로 바로 빌드된다. 컴파일 언어의 빌드 과정은 보통 &lt;strong&gt;Preprocessing-&amp;gt;Parser-&amp;gt;Translation-&amp;gt;Assembler-&amp;gt;Linker&lt;/strong&gt; 의 과정을 거친다. C, C++ 등의 언어가 이곳에 속한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;빌드를 마친 기계어 실행파일의 실행속도가 매우 빠르다&lt;/li&gt;
  &lt;li&gt;빌드를 마친 기계어 실행파일은 배포시 코드 독해가 어려워서 보안에 유리하다&lt;/li&gt;
  &lt;li&gt;직접 하드웨어가 실행하는 실행파일을 만드므로, 하드웨어 제어가 가능하다&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;소스 코드를 수정하고 실행파일에 반영하기 위해선 또다시 긴 빌드 작업을 거쳐야하기 때문에 개발 생산성이 떨어진다&lt;/li&gt;
  &lt;li&gt;서로 다른 OS 에 맞춰 빌드된 실행파일을 다른 OS 에서 실행하지 못한다 (맥은 &lt;code class=&quot;highlighter-rouge&quot;&gt;.exec&lt;/code&gt;,윈도우는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.exe&lt;/code&gt; 확장자명의 실행파일)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;빌드-과정&quot;&gt;빌드 과정&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;순서&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;과정&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Preprocessor (전처리기)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;#define&lt;/code&gt; 같은 매크로나 지시자를 소스코드로 변경하고, c파일이 i파일이 된다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Parser (문법검사)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Syntax(코드 문법)을 검사하고, 문법에 따라 코드를 쪼갠다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Translation (번역)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;문법 파싱이 끝난 소스코드를 어셈블리어로 번역하고, i파일이 s파일이 된다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Assembler (번역)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;어셈블리어를 기계어만큼 낮은 수준의 언어로 번역하고, s파일이 o(object,바이너리,기계어) 파일이 된다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;em&gt;여기까지를 보통 Compile (소스코드-&amp;gt;기계어) 이라고 칭함&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Linker (object파일연결)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;작성된 소스코드가 사용하는 OS API(시스템 콜) 이나 표준 라이브러리를 연결시켜서, exe 파일(실행파일)로 만든다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;byte-code-language&quot;&gt;Byte Code language&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile2.uf.tistory.com/image/260F863454B5EC5E067177&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;작성된 소스코드가 컴파일러(Compiler)를 거치면서 가상머신이 읽을 수 있는 바이트코드(가상머신 기계어)로 번역(Compile)된다. 가상머신은 하나의 프로그램으로, 어느 OS 위에나 설치할 수 있다. 가상머신은 자신이 읽을 수 있는 기계어로 번역된 바이트코드를 다시 Native OS 가 읽을 수 있는 바이트코드(기계어)로 번역한다. JVM (java virtual machine) 을 사용하는 언어들 (Java, Kotlin, Scala 등)이 이곳에 속한다.&lt;/p&gt;

&lt;p&gt;가상머신을 Runtime Environment 라고 부를 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;OS 에 상관없이, 가상 머신 프로그램만 깔려있다면 어디서나 컴파일된 프로그램이 사용 가능하다&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;직접적인 하드웨어 제어는 불가능하다&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;java-소스코드-실행-과정&quot;&gt;Java 소스코드 실행 과정&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;순서&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;과정&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Compile (컴파일)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;가상머신일 읽을 수 있는 바이트코드로 번역되고, &lt;code class=&quot;highlighter-rouge&quot;&gt;.java&lt;/code&gt;파일이 &lt;code class=&quot;highlighter-rouge&quot;&gt;.class&lt;/code&gt; 파일로 변한다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Virtual Machine&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;가상머신에서 바이트코드가 기계어로 번역되어진다&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;interpreter-language&quot;&gt;Interpreter Language&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile24.uf.tistory.com/image/2542FC4454B5F52E362DC0&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;소스코드를 한 줄씩 번역해서 실행한다. 이 한 줄씩 번역하는 프로그램을 Interpreter 라고 한다. 한 줄씩 번역되므로 실행시 메모리 소비가 적다. Python 등의 언어가 이렇다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;장점&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;실시간 실행이 가능해서 코드의 실시간 분석이 가능하다&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;단점&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;빌드된 상태의 컴파일 언어 실행파일보다는 속도가 느리다&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="programming" /><category term="build" /><category term="interpreter" /><category term="compile" /><summary type="html">본 글은 이 글( link ) 을 읽고 작성합니다.</summary></entry><entry><title type="html">웹 브라우저를 제어하는 Javascript 1</title><link href="https://shinjayne.github.io/post/12" rel="alternate" type="text/html" title="웹 브라우저를 제어하는 Javascript 1" /><published>2017-11-15T03:43:50+09:00</published><updated>2017-11-15T03:43:50+09:00</updated><id>https://shinjayne.github.io/post/12</id><content type="html" xml:base="https://shinjayne.github.io/post/12">&lt;p&gt;요즘 웹 개발에 관심이 많아지다보니 자연스레 Javascript 에 대한 관심도 엄청 많아졌다.&lt;/p&gt;

&lt;p&gt;다양한 javascript 의 라이브러리랑 프레임워크들을 써왔지만, 정확한 작동 방식을 모른 채 감으로 써왔다.&lt;/p&gt;

&lt;p&gt;그래서 이번 기회에 기초적인 “javascript 가 웹 브라우저에서 동작하는 방식” 에 대해 정리하고, 까먹지 않으려고 한다.&lt;/p&gt;

&lt;p&gt;좋은 강의를 제공해주신 생활코딩( www.opentutorials.org ) 에게 감사를 전한다.&lt;/p&gt;

&lt;h1 id=&quot;html-에서-javascript-로드하는-방법-3가지&quot;&gt;Html 에서 Javascript 로드하는 방법 3가지&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;inline&lt;/li&gt;
    &lt;li&gt;script 태그 내 직접 기술&lt;/li&gt;
    &lt;li&gt;외부 파일로 분리해 script 파일로 링크&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;object-단위로-웹-브라우저-제어하는-javascript&quot;&gt;Object 단위로 웹 브라우저 제어하는 Javascript&lt;/h1&gt;

&lt;p&gt;Javascript는 Object 라는 단위로 추상화되어있는 웹 브라우저의 요소들을 제어할 수 있다.&lt;/p&gt;

&lt;p&gt;기본 Object 에는 크게 세가지가 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;BOM (Browser Object Model)&lt;/li&gt;
    &lt;li&gt;DOM (Document Object Model)&lt;/li&gt;
    &lt;li&gt;Javascript 내장 기본 Objects&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/904/2229.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-bom-browser-object-model&quot;&gt;1. BOM (Browser Object Model)&lt;/h2&gt;

&lt;h3 id=&quot;bom-기본&quot;&gt;BOM 기본&lt;/h3&gt;

&lt;p&gt;BOM 은 Global Object 인 window 의 method 나 property 들을 이용해 제어할 수 있다.&lt;/p&gt;

&lt;p&gt;웹 브라우저의 창이나 프레임을 추상화해서 제어할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var a = 1;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이렇게 global 객체 하나를 만드는 것은 window 의 소속 객체를 만드는 것과 동일하다.&lt;/p&gt;

&lt;p&gt;즉 이 만들어진 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; 는&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;window.alert(a);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;또는&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;window.alert(window.a);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이렇게 접근이 가능하다.&lt;/p&gt;

&lt;h3 id=&quot;사용자와-커뮤니케이션&quot;&gt;사용자와 커뮤니케이션&lt;/h3&gt;

&lt;p&gt;html 은 form 태그를 통해 사용자 커뮤니케이션 방식을 제공한다.&lt;/p&gt;

&lt;p&gt;javascript 도 사용자와 정보를 주고받을 수 있는 몇가지 방식을 제공한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;alert()&lt;/li&gt;
    &lt;li&gt;confirm()&lt;/li&gt;
    &lt;li&gt;prompt()&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;1-alert&quot;&gt;1. alert()&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alert(&quot;알림 메세지&quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;window.alert(&quot;알림 메세지);&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-confirm&quot;&gt;2. confirm()&lt;/h4&gt;

&lt;p&gt;confirm() 메서드는 브라우저에 알림창을 띄우고, 사용자가 확인을 누르면 true , 취소를 누르면 false 를 return 한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;confirm(&quot;true 를 return 해도 되겠습니까?&quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;window.confirm(&quot;true 를 return 해도 되겠습니까?&quot;);&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-prompt&quot;&gt;3. prompt()&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prompt(&quot;입력한 값이 그대로 return 됩니다.&quot;);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;window.prompt(&quot;입력한 값이 그대로 return 됩니다.&quot;);&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;location-객체&quot;&gt;location 객체&lt;/h3&gt;

&lt;p&gt;html 문서의 주소를 관여하는 객체이다.&lt;/p&gt;

&lt;p&gt;마찬가지로 window object 의 property 다.&lt;/p&gt;

&lt;h3 id=&quot;navigator-객체&quot;&gt;navigator 객체&lt;/h3&gt;

&lt;p&gt;브라우저에 관한 정보를 관여하는 객체이다. ( 주로 브라우저의 호환성을 검사할 때 쓰인다 )&lt;/p&gt;

&lt;p&gt;이 또한 마찬가지로 window object 의 property 다.&lt;/p&gt;

&lt;h3 id=&quot;창window-제어&quot;&gt;창(window) 제어&lt;/h3&gt;

&lt;p&gt;현재 창의 window object 또는 새롭게 로드한 window object 를 제어할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;현재-창의-window-object&quot;&gt;현재 창의 window object&lt;/h4&gt;

&lt;p&gt;가장 처음 호출되는 window object 는 현재 창을 추상화한 것이다.&lt;/p&gt;

&lt;h4 id=&quot;새로-로드한-window-object&quot;&gt;새로 로드한 window object&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new_win = window.open(&quot;https://www.naver.com&quot;) ; &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;open 이란 window 내 method 를 이용해서 새 창을 로드할 수 있다.&lt;/p&gt;

&lt;p&gt;(프로토콜 명까지 입력하면 새 도메인 접속 가능, 프로토콜 명 안적으면 현재 도메인 하위 주소로 이동)&lt;/p&gt;

&lt;h4 id=&quot;window-object-의-로드&quot;&gt;window object 의 로드&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; new_win = window.open(&quot;https://www.naver.com&quot;) ; &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; new_win = window.open(&quot;https://www.naver.com&quot;,  &quot;tabname&quot;); &lt;/code&gt; (새로 열리는 창의 이름을 지정할 수 있다. 후에 같은 이름을 입력하고 새 window object 를 로드해도 브라우저 내 같은 창에 할당된다.)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; new_win = window.open(&quot;https://www.naver.com&quot;, &quot;_self&quot;) ; &lt;/code&gt; (현재 창에 열린다.)&lt;/p&gt;

&lt;h4 id=&quot;window-object-의-조작&quot;&gt;window object 의 조작&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; new_win.close() ; &lt;/code&gt;  (창을 닫는다)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; new_win.document ;&lt;/code&gt; (창 내 document object 를 불러와 후속 작업을 수행한다. document 내 element 를 제어)&lt;/p&gt;

&lt;h2 id=&quot;2-dom-document-object-model&quot;&gt;2. DOM (Document Object Model)&lt;/h2&gt;

&lt;h3 id=&quot;dom-기본&quot;&gt;DOM 기본&lt;/h3&gt;

&lt;p&gt;window.document 라는 거대한 object 내의 프로퍼티들을 이용해 제어할 수 있다.&lt;/p&gt;

&lt;p&gt;window.document 는 window(브라우저 창) 이 띄우고 있는 document(html 문서) 를 추상적으로 가리킨다.&lt;/p&gt;

&lt;h3 id=&quot;document-내에-제어-대상-찾기&quot;&gt;document 내에 제어 대상 찾기&lt;/h3&gt;

&lt;h4 id=&quot;1-documentgetelementsbyid&quot;&gt;1. document.getElementsById&lt;/h4&gt;

&lt;h4 id=&quot;2-documentgetelementsbytagname&quot;&gt;2. document.getElementsByTagName&lt;/h4&gt;

&lt;h4 id=&quot;3-documentgetelementsbyclassname&quot;&gt;3. document.getElementsByClassName&lt;/h4&gt;

&lt;h4 id=&quot;4-documentqueryselector&quot;&gt;4. document.querySelector&lt;/h4&gt;

&lt;p&gt;css 의 query 문법을 이용해 하나만을 선택한다.&lt;/p&gt;

&lt;h4 id=&quot;5-documentqueryselectorall&quot;&gt;5. document.querySelectorAll&lt;/h4&gt;

&lt;h3 id=&quot;jquery-library-dom-을-더-쉽게&quot;&gt;jQuery Library (DOM 을 더 쉽게)&lt;/h3&gt;

&lt;p&gt;jQuery 는 javascript 생태계에서 엄청난 입지를 가지는 라이브러리이다.&lt;/p&gt;

&lt;p&gt;아래 코드처럼 html 에서 로드할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/콘텐츠_전송_네트워크&quot;&gt;CDN(Contents Delevery Network)&lt;/a&gt; 이란 것에 대해서도 새롭게 알게 되었다.
자세한 설명은 위키피디아 링크로 대신하겠다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//code.jquery.com/jquery-1.11.0.min.js&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# // 앞에 프로토콜 명(http, https)은 생략된 것이다. 써도된다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;jQuery 는&lt;/p&gt;</content><author><name></name></author><category term="web" /><category term="javascript" /><summary type="html">요즘 웹 개발에 관심이 많아지다보니 자연스레 Javascript 에 대한 관심도 엄청 많아졌다.</summary></entry><entry><title type="html">Jekyll Cheatsheet : 정적 블로그 관리 Ruby Gem</title><link href="https://shinjayne.github.io/post/11" rel="alternate" type="text/html" title="Jekyll Cheatsheet : 정적 블로그 관리 Ruby Gem" /><published>2017-11-15T03:43:50+09:00</published><updated>2017-11-15T03:43:50+09:00</updated><id>https://shinjayne.github.io/post/11</id><content type="html" xml:base="https://shinjayne.github.io/post/11">&lt;p&gt;jekyll 로 신나게 static 한 블로그를 만들거나 수정하고 나서, 한참 뒤에 다시 블로그 코드를 고치려고 하면 jekyll 다루는 법이 잘 기억이 나지 않곤 한다.&lt;/p&gt;

&lt;p&gt;jekyll 의 작동 방식은 비교적 간단한 편인데, 이것 저것 다른 일들을 하다보면 종종 까먹어서, 나를 위한 jekyll cheatsheet 를 정리해보려고 한다.&lt;/p&gt;

&lt;h1 id=&quot;jekyll-기본-동작-방식&quot;&gt;jekyll 기본 동작 방식&lt;/h1&gt;

&lt;h2 id=&quot;1-텍스트-파일을-html-파일-변환&quot;&gt;1. 텍스트 파일을 html 파일 변환&lt;/h2&gt;

&lt;p&gt;jekyll 은 정적인 웹사이트를 만들어주는 프로그램(ruby gem)이다.&lt;/p&gt;

&lt;p&gt;jekyll 에서 동적인 작업은 모두 ruby 로 처리되고, 동적 변환을 마친  정적 결과물들 (html, css, javascript, contents 파일 등) 은 &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; 폴더 안에 저장된다.&lt;/p&gt;

&lt;p&gt;** [다양한 형식의 텍스트 함유 파일(md, markdown, html 등)] -&amp;gt; [Converter] -&amp;gt; [Liquid Renderer] -&amp;gt; [html 파일] **&lt;/p&gt;

&lt;p&gt;Converter, Renderer 등 동적인 작업을 해주는 파일은 ruby 로 작성된다.&lt;/p&gt;

&lt;p&gt;Converter, Liquid Renderer 들은 &lt;code class=&quot;highlighter-rouge&quot;&gt;_plugins&lt;/code&gt; 폴더에 새로운 ruby 파일을 작성해 추가할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/11/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;converter--md-markdown---html&quot;&gt;[Converter] : .md, .markdown -&amp;gt; .html&lt;/h3&gt;

&lt;p&gt;Converter 는 아래에 해당되는 디렉터리를 모두 긁어서 텍스트파일을 html로 변환한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;jekyll project 디렉터리 하에 있는 시스템 폴더(폴더명 앞에 &lt;code class=&quot;highlighter-rouge&quot;&gt;_folder&lt;/code&gt; 이렇게 붙어있는 폴더)를 제외한 모든 폴더&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 폴더&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;liquid-renderer--global--page-variables-들을-이용해-변환-제어&quot;&gt;[Liquid Renderer] : global / page variables 들을 이용해 변환 제어&lt;/h3&gt;

&lt;p&gt;jekyll 은 사실 “[텍스트파일]-&amp;gt;[html파일]” 의 변환이 전부이다.&lt;/p&gt;

&lt;p&gt;이 동적인 변환 과정을 &lt;strong&gt;global variables 와 page variables 을 이용&lt;/strong&gt; 해서 디테일하게 프로그래밍적으로 조종하고 중복(redundancy) 를 줄일 수 있다.&lt;/p&gt;

&lt;p&gt;Liqiud Renderer 는 jekyll project 디렉터리 내에 존재하는 global/page variables 들을 수집해 페이지 렌더링에 사용한다.&lt;/p&gt;

&lt;p&gt;liquid 문법에 관한 자세한 내용은 &lt;a href=&quot;http://shopify.github.io/liquid/&quot;&gt;Liquid Hompage&lt;/a&gt; 에서 참고할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;1-global-variables&quot;&gt;1) global variables&lt;/h4&gt;

&lt;p&gt;jekyll project 디렉터리 최상단 _config.yml 파일에 기술된 variable 들이다.&lt;/p&gt;

&lt;p&gt;담당하는 역할은 2가지이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;모든 page 객체들 속의 page variables 들의 default 값을 제공한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;jekyll system 의 설정값 역할을 한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;2-page-variables&quot;&gt;2) page variables&lt;/h4&gt;

&lt;p&gt;jekyll project 내 존재하는 Converter 가 인식하는 모든 파일들(.html, .md, .markdown 또는 커스텀 텍스트 파일 등)의 상단에 yml 형식으로 기술되는 page variables 들이다.&lt;/p&gt;

&lt;p&gt;page.page_variable_name 으로 조회 가능하다.&lt;/p&gt;

&lt;p&gt;예를 들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 의 상단에 기술된 yml 이 아래와 같다면&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;title : &quot;this is the title&quot; &lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;id : 10&lt;/code&gt;&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;index.html 문서 내에서 다음과 같이 조회할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll Cheatsheet : 정적 블로그 관리 Ruby Gem&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/post/11&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;jekyll-command-line-다루는-법&quot;&gt;jekyll Command Line 다루는 법&lt;/h1&gt;

&lt;h2 id=&quot;1-설치&quot;&gt;1. 설치&lt;/h2&gt;

&lt;p&gt;두개의 ruby gem을 설치해야한다. (jekyll, bundler)&lt;/p&gt;

&lt;p&gt;ruby gem 은 ruby 의 규칙으로 작성된 프로그램을 말한다. command line 의 gem 명령어로 설치할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundler&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;jekyll&lt;/strong&gt; : jekyll 프로젝트를 다루는 프로그램(gem)이다. 새로운 프로젝트 생성, 빌드, 배포 등을 처리할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;bundler&lt;/strong&gt; : Ruby gem 을 관리해주는 프로그램(gem)이다. 패키지 매니져 같은 느낌(?). 프로젝트 디렉터리의 Gemfile, Gemfile.lock 파일이 프로젝트에 필요한 ruby gem 목록을 bundler 에게 알려준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2-프로젝트-생성&quot;&gt;2. 프로젝트 생성&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project_dir&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project_name&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#자동실행&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;project_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;3-로컬-서버-테스트&quot;&gt;3. 로컬 서버 테스트&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exec&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;detach&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;4-프로젝트-배포&quot;&gt;4. 프로젝트 배포&lt;/h2&gt;

&lt;p&gt;프로젝트 디렉터리에 _site 라는 이름을 가진 폴더를 생성하고, 그 안에 정적 웹사이트 빌드 결과물을 생성한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;exec&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jekyll&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watch&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><category term="ruby" /><category term="jekyll" /><summary type="html">jekyll 로 신나게 static 한 블로그를 만들거나 수정하고 나서, 한참 뒤에 다시 블로그 코드를 고치려고 하면 jekyll 다루는 법이 잘 기억이 나지 않곤 한다.</summary></entry><entry><title type="html">open-AI 의 gym (python package) 이용해 강화학습 훈련하기 1: Q-learning</title><link href="https://shinjayne.github.io/post/10" rel="alternate" type="text/html" title="open-AI 의 gym (python package) 이용해 강화학습 훈련하기 1: Q-learning " /><published>2017-08-08T03:43:50+09:00</published><updated>2017-08-08T03:43:50+09:00</updated><id>https://shinjayne.github.io/post/10</id><content type="html" xml:base="https://shinjayne.github.io/post/10">&lt;p&gt;open-AI 에서 파이썬 패키지로 제공하는 gym 을 이용하면 , 손쉽게 강화학습 환경을 구성할 수 있다.&lt;/p&gt;

&lt;p&gt;gym package 를 이용해서 강화학습 훈련 환경을 만들어보고, Q-learning 이라는 강화학습 알고리즘에 대해 알아보고 적용시켜보자.&lt;/p&gt;

&lt;blockquote&gt;

  &lt;h3 id=&quot;목차&quot;&gt;목차&lt;/h3&gt;
  &lt;p&gt;&lt;a href=&quot;#1.-gym-package-이용하기&quot;&gt;1. gym package 이용하기&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;#2.-Q-learning-이란?&quot;&gt;2. Q-learning 이란? &lt;/a&gt;&lt;/p&gt;
  &lt;blockquote&gt;

    &lt;p&gt;&lt;a href=&quot;#Q-learning-의-학습-(Greedy,-Dummy)&quot;&gt;2-1. Q-learning 의 학습(Dummy Q learning)&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;#Dummy-Q-learning-학습---python-code&quot;&gt;2-2. Dummy Q-learning python code&lt;/a&gt;&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;p&gt;&lt;a href=&quot;#3.-완벽한-Q-learning-(-Dummy-Q-learning-의-문제-)&quot;&gt;3. 완벽한 Q-learning ( Dummy Q-learning 의 문제 )&lt;/a&gt;&lt;/p&gt;
  &lt;blockquote&gt;

    &lt;p&gt;&lt;a href=&quot;#해결책-1-:--E-greedy&quot;&gt;3-1. 해결책 1 :  E-greedy &lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;#해결책-2-:-add-Random-noise&quot;&gt;3-2. 해결책 2 : add Random Noise&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;#새로운-문제-:-여러-경로가-생긴다&quot;&gt;3-3. 새로운 문제 : 여러 경로 &lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;#Q-learning-python-코드와-실행결과&quot;&gt;3-4. 완벽한 Q-learning python code &lt;/a&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-gym-package-이용하기&quot;&gt;1. gym package 이용하기&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;open-AI 에서 만든 gym 이란 파이썬 패키지를 이용하면 강화학습( Reinforcement Learning ) 훈련을 수행할 수 있는 Agent와 Environment 를 제공받을 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://gym.openai.com/&quot;&gt;open-AI gym 홈페이지&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;gym 을 간단하게 pip install 통해서 설치할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# command line (bash)&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gym&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readchar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;실제로 gym 을 사용해본다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# gym_example.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gym&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gym.envs.registration&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;readchar&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;arrow_keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x1b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[A'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x1b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[B'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DOWN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x1b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[C'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RIGHT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x1b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[D'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LEFT&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'FrozenLake-v3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entry_point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gym.envs.toy_text:FrozenLakeEnv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'map_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'4x4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'is_slippery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;


&lt;span class=&quot;s&quot;&gt;'''여기서부터 gym 코드의 시작이다. env 는 agent 가 활동할 수 있는 environment 이다.'''&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FrozenLake-v3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#환경을 화면으로 출력&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readchar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readkey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;#키보드 입력을 받는다&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow_keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Game aborted!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#에이젼트의 움직임&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#움직임에 따른 결과값들&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#화면을 다시 출력&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;State:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Reward:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Info:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#도착하면 게임을 끝낸다.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Finished with reward&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위와 같은 코드로, 내가 직접 게임을 진행해볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-q-learning-이란&quot;&gt;2. Q-learning 이란?&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/10/1.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 gym-example.py 코드같은 environment 에서, agent 가 무작위로 방향을 결정하면 학습이 잘 되지 않는다.&lt;/p&gt;

&lt;p&gt;시도 횟수는 엄청 많은데에 비해 reward는 성공할 때 한번만 지급되기 때문이다.&lt;/p&gt;

&lt;p&gt;그에 대한 해결책이 바로 Q-learning 이다.&lt;/p&gt;

&lt;p&gt;agent는 방향을 결정해야할 때마다 가상의 Q 에게 행보를 물어본다.&lt;/p&gt;

&lt;p&gt;Q 는 agent 의 state를 보고 그가 action1 을 취하면 기대되는 reward1(quality1) 을 알려주고, action2 를 취하면 기대되는 reward2(quality2) 를 알려준다.&lt;/p&gt;

&lt;p&gt;agent 는 Q의 도움을 받아 더 빠른 학습이 가능하다.&lt;/p&gt;

&lt;p&gt;수식적으로는&lt;/p&gt;

&lt;p&gt;Q(s, a) = π  처럼 쓸 수 있으며&lt;/p&gt;

&lt;p&gt;현재 s(state)에서 취할수 있는 가장 큰 reward 인 max Q  max(Q(s,a)) 로&lt;/p&gt;

&lt;p&gt;현재 s(state)에서 max(Q(s,a))로 가게 해주는 action 은 argmax(Q(s,a)) 로 표현한다.&lt;/p&gt;

&lt;p&gt;argmax(Q(s,a))는 π*(s) 로도 표현하며 여기서 *은 optimal 함을 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/10/2.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;q-learning-의-학습-greedy-dummy&quot;&gt;Q-learning 의 학습 (Greedy, Dummy)&lt;/h2&gt;

&lt;p&gt;Q-learning 알고리즘에서 학습한다는 것은 아래 그림처럼 모두 0으로 초기화되어있는 모든 Q 값들을 하나씩 업데이트시킨다는 것과 같다.&lt;/p&gt;

&lt;p&gt;모든 칸의 0은 각각의 Q(s,a) 값을 나타낸다.&lt;/p&gt;

&lt;p&gt;도착지점으로 넘어갈 때에만 reward = 1 이 주어지고, 나머지 부분으로 넘어갈 때에는 reward = 0 이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/10/6.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 각 칸의 Q 값을 업데이트 하는 방법은 다음과같다.&lt;/p&gt;

&lt;p&gt;Q(s,a) 의 값은 (다음칸의 Q 중 가장 큰 값 + reward) 로 표현해서 적는다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/10/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;처음에는 어디로 가든 reward 도 0이고 max Q(s’, a’) 도 0이다. 그래서 agent가 무작위로 방향을 결정한다. 그러다 우연히 아래 그림처럼 도착지점 바로 왼쪽칸에 도착했다.&lt;/p&gt;

&lt;p&gt;이때 Q(s14, right) 의 값은 reward = 1 값 더하기 maxQ(s15,a’) = 0 으로 1 로 업데이트된다.&lt;/p&gt;

&lt;p&gt;이게 첫번째 학습이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/10/5.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;한번 학습이 끝난 후 agent 는 다시 시작지점에서 출발한다. 역시나 대부분의 Q가 0으로 초기화되어있고, 주변의 reward 도 0이기 때문에 무작위로 나아간다.&lt;/p&gt;

&lt;p&gt;그러다 다시 우연히 s13 칸에 도착했다고 하자.&lt;/p&gt;

&lt;p&gt;이때 Q(s13,right) 를 계산해보았더니, reward = 0 이지만 max Q(s’,a’) 이 1이다.&lt;/p&gt;

&lt;p&gt;이렇게 다시 Q(s13,right) = 1 로 업데이트하고 다시 agent 를 시작점으로 보낸다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이런식으로 계속해서 학습을 하다보면 결국 아래 그림처럼 시작 지점의 Q 까지 학습이 되고, 이렇게 Dummy Q-learning 의 학습이 끝난다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/10/3.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;루틴을 정리하자면 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/10/4.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dummy-q-learning-학습---python-code&quot;&gt;Dummy Q-learning 학습 - python code&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# dummy_q_learning.py&lt;/span&gt;


&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gym&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gym.envs.registration&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pr&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;qmax_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;four_q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot; 상태 s 에서 네가지 a 에 따른 네가지 Q 중 가장 큰 것을 선택 (같으면 랜덤하게 선택)&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maxq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;amax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;four_q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;indices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonzero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;four_q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'FrozenLake-v3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entry_point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gym.envs.toy_text:FrozenLakeEnv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'map_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'4x4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'is_slippery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'FrozenLake-v3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# shape = [States num, 4(left,down,right,up)]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observation_space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Set learning parameters&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;num_episodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create lists to contain total rewards and steps per episode&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_episodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Reset environment and get first new observation&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# The Q-Table learning algorithm&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;qmax_action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# Get new state and reward from environment&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# Update Q-Table with new knowledge using learning rate&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;rAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Success rate: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_episodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Final Q-Table Values&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LEFT DOWN RIGHT UP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-완벽한-q-learning--dummy-q-learning의-문제-&quot;&gt;3. 완벽한 Q-learning ( Dummy Q-learning 의 문제 )&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;dummy Q-learning 의 문제는 아래 그림처럼 가장 optimal 한 경로를 따라 Q 가 업데이트 되지 않을 수 있는 가능성이 있다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/10/3_1.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해결할 수 있는 방법은 단 하나다.&lt;/p&gt;

&lt;p&gt;가끔은 최적의 Q로 이동하는 action 이 아닌 랜덤한 action을 취해주는 것이다.&lt;/p&gt;

&lt;p&gt;(예를들어 위 그림에서 첫번째 state 일때, 오른쪽으로 가지 않고 한번 아래로 가보는 action을 취해보는 것이다.)&lt;/p&gt;

&lt;p&gt;그 방법으로 2가지가 있다.&lt;/p&gt;
&lt;blockquote&gt;

  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;E-greedy (랜덤한 확률로 아무데나 가본다.)&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;add Random noise (Q 에 random noise 를 더해 랜덤한 action 을 취한다.)&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 두가지에 대해 자세히 알아보자.&lt;/p&gt;

&lt;h2 id=&quot;해결책-1---e-greedy&quot;&gt;해결책 1 :  E-greedy&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/10/7.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일정 확률로 가끔은 최적의 action 을 따라가지 않도록 설정한다.&lt;/p&gt;

&lt;h2 id=&quot;해결책-2--add-random-noise&quot;&gt;해결책 2 : add Random noise&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/10/9.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;action 을 결정할 때 참고하는 각 Q 값에 random 한 noise 를 주어서 action 이 조금 random 해지도록  한다.&lt;/p&gt;

&lt;h2 id=&quot;새로운-문제--여러-경로가-생긴다&quot;&gt;새로운 문제 : 여러 경로가 생긴다&lt;/h2&gt;

&lt;p&gt;위와 같이 dummy Q learning 문제를 보완하는 기법들을 사용하면 agent 가 최종적으로 경로를 결정하려고 할 때 선택의 문제에 놓인다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/10/10.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이런 상황을 막으려면 학습과정에서 Q를 업데이트할 때, 다음 max Q(s’, a’) 값에다 특정 감마(&amp;lt;1) 값을 곱해준다.&lt;/p&gt;

&lt;p&gt;그러면 상대적으로 구불하고 긴 경로로 인도하는 Q 값들은 작아지고, 가장 짧은 경로로 인도하는 Q 값들은 커진다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/10/11.PNG&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;q-learningpython-코드와-실행결과&quot;&gt;Q-learning python 코드와 실행결과&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# q_learning.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gym&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gym.envs.registration&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pr&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'FrozenLake-v3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entry_point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'gym.envs.toy_text:FrozenLakeEnv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'map_name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'4x4'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;'is_slippery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'FrozenLake-v3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Initialize table with all zeros&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observation_space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;'''1. Q 값이 업데이트될 때 maxQ(s',a') 에 곱할 감마 값을 설정한다.'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;num_episodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create lists to contain total rewards and steps per episode&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_episodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Reset environment and get first new observation&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;s&quot;&gt;'''2. E-Greedy 를 위한 확률값을 만들어준다. (step i이 지남에 따라 decay 되도록 설정)'''&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  

    &lt;span class=&quot;c&quot;&gt;# The Q-Table learning algorithm : 한번 수행할 때 마다 Q 한칸 업데이트&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

        &lt;span class=&quot;s&quot;&gt;'''E-Greedy 를 따라 작은 확률로 랜덤하게 가고, 큰 확률로 높은 Q 를 따르는 쪽으로 간다.'''&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action_space&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# Get new state and reward from environment&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# Update Q-Table with new knowledge using learning rate&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;rAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reward&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_state&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Success rate: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_episodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Final Q-Table Values&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/10/12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="tensorflow" /><category term="openai" /><summary type="html">open-AI 에서 파이썬 패키지로 제공하는 gym 을 이용하면 , 손쉽게 강화학습 환경을 구성할 수 있다.</summary></entry><entry><title type="html">Auto Encoder 에 대하여 : Auto Encoder 의 개념과 사용법, 그리고 Regularization</title><link href="https://shinjayne.github.io/post/9" rel="alternate" type="text/html" title="Auto Encoder 에 대하여 : Auto Encoder 의 개념과 사용법, 그리고 Regularization" /><published>2017-08-02T21:21:50+09:00</published><updated>2017-08-02T21:21:50+09:00</updated><id>https://shinjayne.github.io/post/9</id><content type="html" xml:base="https://shinjayne.github.io/post/9">&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/9/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Autoencoder 의 간략한 구조는 위와 같다.&lt;/p&gt;

&lt;p&gt;=&amp;gt; self supervised learning 에 가깝다.&lt;/p&gt;

&lt;p&gt;자기 자신을 target(label) 값으로 사용하기 때문이다.&lt;/p&gt;

&lt;p&gt;가운데 초록색 노드들(Hidden nodes) 을 coding layer, 또는 bottleneck 이라고 부른다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-autoencoder-를-어디에-쓰나&quot;&gt;1. Autoencoder 를 어디에 쓰나&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
**1.feature detection **&lt;/p&gt;

&lt;p&gt;학습된 autoencoder에서는 coding layer 가 input 의 중요한 feature 들을 나타내게된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.recommendation system&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;추후 튜토리얼을 확인하자.&lt;/p&gt;

&lt;p&gt;**3.encoding **&lt;/p&gt;

&lt;p&gt;Decoder로 디코딩할수 있는 코드로 input 값을 encoding(암호화) 하는 기능을 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-autoencoder-의-작동&quot;&gt;2. Autoencoder 의 작동&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/9/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://probablydance.com/2016/04/30/neural-networks-are-impressively-good-at-compression/&quot;&gt;이 사이트&lt;/a&gt; 를 참고한 모델을 설명한다.&lt;/p&gt;

&lt;p&gt;주로 activation function 으로 tanh 를 사용한다. (hidden 직전과 visible 직전에)&lt;/p&gt;

&lt;p&gt;output 값에 softmax 를 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-autoencoder-의-bias&quot;&gt;3. Autoencoder 의 Bias&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/9/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 Bias 를 추가할 수도 있고, 그림으론 이렇게 표현한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;4-autoencoder-의-training&quot;&gt;4. Autoencoder 의 Training&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;step&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;내용&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;부가&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;input vector x_u = (r1,r2,.., ri,…,rm) 은 user u 의 m개의 영화에 대한 rating이다.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rating은 1~5 사이의 값이고, rating 없으면 0이다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;input vector(user 단위) 가 하나 network 로 들어간다.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;input vector x_u 는 vector z 로 인코딩된다.x 에서 z 로 갈 때 mapping function 에 의해 차원이 축소된다.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;mapping function : z = f(Wx+b) (f : sigmoid, tanh , etc)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;z 가 output vector y로 decoding 된다. y는 x vector 와 같은 차원을 가진다.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;y가 x의 복사본이 되게 하는 것이 학습의 목적이다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;reconstruction error d(x,y) 를 계산한다. 이 error function 을 최소화시킨다.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;error function : d(x,y)=//x-y//&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;back-propagation 을 이용해, error 의 값이 역전파되고, W,b 값들이 tuning 된다.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;learning rate 에 따라 학습 정도가 달라진다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;step 1~6 을 반복하면서 파라메터들을 업데이트한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;만약 vector 하나씩 넣으면서 update 시키면 Reinforcement Learning 이고, 여러 batch 씩 한꺼번에 넣으면서 학습시키면 Batch Learning&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;전체 데이터셋을 한번 다 학습시켰다면, epoch 단위로 몇번 더 학습한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;5-hidden-layer-의-갯수가-많을수록-좋을까&quot;&gt;5. Hidden Layer 의 갯수가 많을수록 좋을까?&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;/asset/media/image/post/9/8.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와같이 hidden node 의 갯수를 input 갯수보다 늘리면 좋을까?&lt;/p&gt;

&lt;p&gt;언뜻 생각하면, 더 많은 feature를 뽑아낼 수 있어서 좋겠다 라고 생각할 수 있지만 실제론 그렇지 않다.&lt;/p&gt;

&lt;p&gt;맨 상단과 맨 아래 있는 node 가 사용되지 않고, 가운데 5개의 node 가 input 을 output  으로 그대로 복사하는 문제가 생긴다.&lt;/p&gt;

&lt;p&gt;encoding 의 기능이 없어지는 것이다. 그렇게되면 의미있는 feature 를 뽑아낼 수 없다.&lt;/p&gt;

&lt;p&gt;이러한 문제, 즉 Autoencoder 의 Overfitting(과적합) 문제를 해결하기 위한 Regularization 방법들을 소개한다.&lt;/p&gt;

&lt;p&gt;Sparse AE,&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;6-regularization1--sparse-autoencoder&quot;&gt;6. Regularization1 : Sparse Autoencoder&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;매우 유명하다. 굉장히 많이 사용된다.&lt;/p&gt;

&lt;p&gt;위처럼 데이터를 그대로 옮기는 hidden node 가 생기는  overfitting  문제를 해결한다.&lt;/p&gt;

&lt;p&gt;간단히 말하자면 hidden node 중 매번 일부 node 만 사용해서 학습한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/9/9.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;7-regularization2--denoising-autoencoder&quot;&gt;7. Regularization2 : Denoising Autoencoder&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Stochastic 한 Auto Encoder 다.&lt;/p&gt;

&lt;p&gt;input X 중의 일부만 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/9/10.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;8-regularization3--contractive-autoencoder&quot;&gt;8. Regularization3 : Contractive Autoencoder&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;정리 후 내용을 추후 추가하겠다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;9-stacked-autoencoder&quot;&gt;9. Stacked Autoencoder&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Stacked Autoencoder 는 간단히 encoding layer를 하나 더 추가한 것인데, 성능은 매우 강력하다.&lt;/p&gt;

&lt;p&gt;이 간단한 모델이 Deep Belief Network 의 성능을 넘어서는 경우도 있다고 하니, 정말 대단하다.&lt;/p&gt;

&lt;p&gt;참고자료를 읽고, 다시 정리하겠다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/9/11.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;10-deep-autoencoder&quot;&gt;10. Deep Autoencoder&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Deep autoencoder 를 알기 전에 확실하게 짚고 넘어가야할 부분은, **Deep Autoencoder 와 Stacked Autoencoder 는 전혀 다른것이다. **&lt;/p&gt;

&lt;p&gt;반드시 구분해야한다.&lt;/p&gt;

&lt;p&gt;Deep autoencoder 는 RBM ( Ristricted Boltzman Machine ) 을 쌓아 만들었고,&lt;/p&gt;

&lt;p&gt;Stacked autoencoder 는 autoencoder 의 encoding layer 를 깊게 쌓아 만든 것이다.&lt;/p&gt;</content><author><name></name></author><category term="sklearn" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">tensorflow 로 checkpoint 파일(.ckpt)과 ckeckpoint state proto 이용하기 : Variable 저장과 재활용</title><link href="https://shinjayne.github.io/post/8" rel="alternate" type="text/html" title="tensorflow 로 checkpoint 파일(.ckpt)과 ckeckpoint state proto 이용하기 : Variable 저장과 재활용" /><published>2017-07-29T02:59:50+09:00</published><updated>2017-07-29T02:59:50+09:00</updated><id>https://shinjayne.github.io/post/8</id><content type="html" xml:base="https://shinjayne.github.io/post/8">&lt;p&gt;tensorflow 로 학습시킨 딥러닝 모델을 저장하는 방법중 하나로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Checkpoint&lt;/code&gt; 을 이용하는 방법이 있다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Checkpoint&lt;/code&gt; 은 학습된 모델의 Variable 값을 저장하는 파일이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Checkpoint&lt;/code&gt; 파일을 저장하고 불러옴으로써 학습된 모델을 재사용하고, 지난 학습을 이어서 더 하고 하는 작업들이 가능해진다.&lt;/p&gt;

&lt;p&gt;이번 글에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Checkpoint&lt;/code&gt; 파일을 다루는 tensorflow 모듈에 대해서 알아보고, 능숙하게 딥러닝 모델을 저장하고 불러오는 작업을 수행할 수 있도록 하는 것이 목표이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;0-모델-디렉터리-구조&quot;&gt;0. 모델 디렉터리 구조&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;project(root)&lt;br /&gt;
ㄴmodel&lt;br /&gt;
~ ㄴgraph.py&lt;br /&gt;
~ ㄴrunner.py&lt;br /&gt;
~ ㄴutils.py&lt;br /&gt;
ㄴdata&lt;br /&gt;
~ ㄴtrain_data&lt;br /&gt;
~ ㄴtest_data&lt;br /&gt;
ㄴsaved&lt;br /&gt;
~ &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프로젝트 디렉터리 구조가 이렇다고 가정한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#/model/graph.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tf&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as_default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;v1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;v2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-checkpoint-저장&quot;&gt;1. checkpoint 저장&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위의 모델 그래프를 학습시키면서, 학습된 모델의 Variable 들을 checkpoint에 저장해본다.&lt;/p&gt;

&lt;p&gt;첫번째 training job 의 이름을 train1 이라고 하자.&lt;/p&gt;

&lt;p&gt;train1 job 의 결과물은 &lt;code class=&quot;highlighter-rouge&quot;&gt;/saved/train1.ckpt&lt;/code&gt; 에 저장할 것이다.&lt;/p&gt;

&lt;p&gt;그러기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Checkpoint&lt;/code&gt;파일을 저장해주는 tf.train.Saver() 클래스를 이용해야한다.&lt;/p&gt;

&lt;p&gt;참고 : &lt;a href=&quot;https://www.tensorflow.org/versions/r0.12/api_docs/python/state_ops/saving_and_restoring_variables&quot;&gt;tensorflow api 공식 doc : tf.train.Saver&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#/model/train.py&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Saver instance 를 생성한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Saver.save(sess, ckpt_path)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Saver.restore(sess, ckpt_path)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;saver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Saver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global_variables_initializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# 그래프를 돌리다가 Variable 을 저장하고 싶을 때 Saver.save() 메서드를 사용한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# args : tf.Session, job`s checkpoint file path&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# return : job`s checkpoint file path (String)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ckpt_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saved/train1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;job`s ckpt files is save as : &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ckpt_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;job`s ckpt files is save as :  saved/train1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위의 코드를 수행하고 나면 프로젝트의 /saved 디렉터리에 새로운 파일들이 생성된다.&lt;/p&gt;

&lt;p&gt;project(root)&lt;br /&gt;
ㄴmodel&lt;br /&gt;
~ ㄴgraph.py&lt;br /&gt;
~ ㄴrunner.py&lt;br /&gt;
~ ㄴutils.py&lt;br /&gt;
ㄴdata&lt;br /&gt;
~ ㄴtrain_data&lt;br /&gt;
~ ㄴtest_data&lt;br /&gt;
ㄴsaved&lt;br /&gt;
~ ㄴ&lt;strong&gt;checkpoint&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train1.ckpt.data-00000-of-00001&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train1.ckpt.index&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train1.ckpt.meta&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이들중 job name 인 train1 으로 시작하는 세개의 파일이 train1 job 의 Checkpoint 파일이다.&lt;/p&gt;

&lt;p&gt;맨 위의 checkpoint 란 이름의 파일은 조금 이따 이야기한다.
&lt;br /&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;첫번째 training job : train1 의 결과가 만족스럽지 못해서, 모델을 조금 수정해서 다시 training 을 하려고 한다.&lt;/p&gt;

&lt;p&gt;이번 job 의 이름은 train2 라고 하자.&lt;/p&gt;

&lt;p&gt;train2 job 의 결과물을 /saved/train2.ckpt 에 저장하는데, 이번엔 매 iteration마다 Variables 의 값을 저장하고싶다.&lt;/p&gt;

&lt;p&gt;이럴땐 job의 이름을 유지한채로, iteration 별로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Checkpoint file&lt;/code&gt;을 별도로 생성할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#/model/train.py(수정함)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# 위와 마찬가지로 Saver 생성&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;saver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Saver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global_variables_initializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# 매 step 마다 모델 저장하고 싶다면 save 메서드에 step 인자를 하나 추가한다.&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# args : tf.Session, job`s checkpoint file path, step&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# return : job`s checkpoint file path (String)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ckpt_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saved/train2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;save ckpt file:&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ckpt_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;save ckpt file: saved/train2-0
save ckpt file: saved/train2-1
save ckpt file: saved/train2-2
save ckpt file: saved/train2-3
save ckpt file: saved/train2-4
save ckpt file: saved/train2-5
save ckpt file: saved/train2-6
save ckpt file: saved/train2-7
save ckpt file: saved/train2-8
save ckpt file: saved/train2-9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;보다시피 train1 job 과는 다르게 job name 뒤에 iteration의 step 이 적혀져서 총 10묶음의 체크포인트가 만들어진다.&lt;/p&gt;

&lt;p&gt;project(root)&lt;br /&gt;
ㄴmodel&lt;br /&gt;
~ ㄴgraph.py&lt;br /&gt;
~ ㄴrunner.py&lt;br /&gt;
~ ㄴutils.py&lt;br /&gt;
ㄴdata&lt;br /&gt;
~ ㄴtrain_data&lt;br /&gt;
~ ㄴtest_data&lt;br /&gt;
ㄴsaved&lt;br /&gt;
~ ㄴ&lt;strong&gt;checkpoint&lt;/strong&gt;&lt;br /&gt;
~ ㄴtrain1.ckpt.data-00000-of-00001&lt;br /&gt;
~ ㄴtrain1.ckpt.index&lt;br /&gt;
~ ㄴtrain1.ckpt.meta&lt;br /&gt;
~ ㄴ&lt;strong&gt;train2-0.ckpt.data-00000-of-00001&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train2-0.ckpt.index&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train2-0.ckpt.meta&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train2-1.ckpt.data-00000-of-00001&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train2-1.ckpt.index&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train2-1.ckpt.meta&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train2-2.ckpt.data-00000-of-00001&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train2-2.ckpt.index&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train2-2.ckpt.meta&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;.
.
.&lt;/p&gt;

&lt;p&gt;~ ㄴ&lt;strong&gt;train2-8.ckpt.data-00000-of-00001&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train2-8.ckpt.index&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train2-8.ckpt.meta&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train2-9.ckpt.data-00000-of-00001&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train2-9.ckpt.index&lt;/strong&gt;&lt;br /&gt;
~ ㄴ&lt;strong&gt;train2-9.ckpt.meta&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-checkpoint-state-proto&quot;&gt;2. checkpoint state proto&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/asset/media/image/post/8/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위의 사진은 &lt;a href=&quot;https://www.tensorflow.org/versions/r0.12/api_docs/python/state_ops/saving_and_restoring_variables&quot;&gt;tensorflow api 공식 doc : tf.train.Saver&lt;/a&gt; 사이트에서 볼 수 있는 &lt;strong&gt;&lt;em&gt;Checkpoint State Protocol Buffer&lt;/em&gt;&lt;/strong&gt; 에 대한 정보이다.&lt;/p&gt;

&lt;p&gt;이름도 거대한 &lt;strong&gt;&lt;em&gt;Checkpoint State Protocol Buffer&lt;/em&gt;&lt;/strong&gt; 에 대해서 알 필요가 있다.&lt;/p&gt;

&lt;p&gt;Saver 의 save 모듈을 이용해 모델을 저장할 때, Saver 는 &lt;strong&gt;&lt;em&gt;Checkpoint State Protocol Buffer&lt;/em&gt;&lt;/strong&gt; 를 /saved/checkpoint 파일에 담아 저장하고, 새로운 job으로 학습할 때 마다 업데이트해 저장한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Checkpoint State Protocol Buffer&lt;/em&gt;&lt;/strong&gt; 에는 두가지 정보가 담겨있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;model_checkpoint_path : 가장 최근에 저장된 job.ckpt 파일의 path 정보&lt;/li&gt;
  &lt;li&gt;all_model_checkpoint_paths : 최근에 저장된 job_i.ckpt 파일들의 path 정보 list&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;보통 saved 폴더에서 가장 최신의 체크포인트파일을 불러와 모델을 재학습시키거나 테스트해보려고 할때 사용한다.&lt;/p&gt;

&lt;p&gt;all_model_checkpoint_paths 의 가장 마지막 원소는 model_checkpoint_path 와 동일하다.&lt;/p&gt;

&lt;h3 id=&quot;checkpoint-state-protocol-buffer-이용법&quot;&gt;&lt;strong&gt;&lt;em&gt;Checkpoint State Protocol Buffer&lt;/em&gt;&lt;/strong&gt; 이용법&lt;/h3&gt;

&lt;p&gt;대표적으로 두가지 방법이 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;tf.train.get_checkpoint_state(saved_dir_path)&lt;/li&gt;
  &lt;li&gt;tf.train.latest_checkpoint(saved_dir_path)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;1-tftrainget_checkpoint_statesaved_dir_path&quot;&gt;1. tf.train.get_checkpoint_state(saved_dir_path)&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;saved_dir_path&lt;/code&gt; 에서 checkpoint 파일 안의 &lt;strong&gt;&lt;em&gt;Checkpoint State Protocol Buffer&lt;/em&gt;&lt;/strong&gt; 를 읽어온다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ckpt_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_checkpoint_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;saved&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ckpt_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;첫번째 정보 사용법:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ckpt_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;model_checkpoint_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;두번째 정보 사용법:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ckpt_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all_model_checkpoint_paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;class 'tensorflow.python.training.checkpoint_state_pb2.CheckpointState'&amp;gt;
첫번째 정보 사용법: saved/train2-9
두번째 정보 사용법: ['saved/train2-5', 'saved/train2-6', 'saved/train2-7', 'saved/train2-8', 'saved/train2-9']
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;2-tftrainlatest_checkpointsaved_dir_path&quot;&gt;2. tf.train.latest_checkpoint(saved_dir_path)&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;saved_dir_path&lt;/code&gt; 에서 checkpoint 파일 안의 &lt;strong&gt;&lt;em&gt;Checkpoint State Protocol Buffer&lt;/em&gt;&lt;/strong&gt; 에서  model_checkpoint_path 정보만 string 으로 반환한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;recent_ckpt_job_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latest_checkpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;saved&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recent_ckpt_job_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;saved/train2-9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-checkpoint-불러오기&quot;&gt;3. checkpoint 불러오기&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;저장한 체크포인트 파일들에서 Variable 들을 다시 꺼내서 재사용하려면 tf.Saver 클래스의 restore 메서들을 이용한다.&lt;/p&gt;

&lt;p&gt;이때 위에서 언급한 &lt;strong&gt;&lt;em&gt;Checkpoint State Protocol Buffer&lt;/em&gt;&lt;/strong&gt; 가 매우 요긴하게 쓰인다.&lt;/p&gt;

&lt;p&gt;test1 job 을 수행하는데에 train2 job 에서 마지막에 저장한 변수 ckpt 결과물을 로드해 사용하고싶다.&lt;/p&gt;

&lt;p&gt;그렇다면 아래의 코드처럼 하면된다.&lt;/p&gt;

&lt;h3 id=&quot;case-1-직접-불러올-jobckpt-명시해주는-경우&quot;&gt;case 1: 직접 불러올 job.ckpt 명시해주는 경우&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#/model/test.py&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Saver instance 를 생성한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Saver.restore(sess, ckpt_path)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;saver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Saver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global_variables_initializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Saver.restore()&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# args : tf.Session, job`s checkpoint file path&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# return : None&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ckpt_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saved/train2-9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INFO:tensorflow:Restoring parameters from saved/train2-9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;case-2-tftrainlatest_checkpointdir_path-이용하는-경우&quot;&gt;case 2: tf.train.latest_checkpoint(dir_path) 이용하는 경우&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#/model/test.py&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Saver instance 를 생성한다.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Saver.restore(sess, ckpt_path)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;saver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Saver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global_variables_initializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# Saver.restore()&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# args : tf.Session, job`s checkpoint file path&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# return : None&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ckpt_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;saver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;restore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latest_checkpoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;saved&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;INFO:tensorflow:Restoring parameters from saved/train2-9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name></name></author><category term="tensorflow" /><category term="python" /><summary type="html">tensorflow 로 학습시킨 딥러닝 모델을 저장하는 방법중 하나로 Checkpoint 을 이용하는 방법이 있다.</summary></entry></feed>